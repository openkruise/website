{
  "filename": "installation.md",
  "__html": "<h1 id=\"%E5%AE%89%E8%A3%85-openkruise\">安装 OpenKruise <a class=\"header-anchor\" href=\"#%E5%AE%89%E8%A3%85-openkruise\">#</a></h1>\n<p>尽管目前 OpenKruise 能够兼容 Kubernetes &gt;= 1.13 版本的集群，但我们强烈建议在 <strong>Kubernetes &gt;= 1.16</strong> 以上版本的集群中使用。</p>\n<p>注意:</p>\n<ol>\n<li>在 1.13 和 1.14 版本中必须先在 kube-apiserver 中打开 <code>CustomResourceWebhookConversion</code> feature-gate。</li>\n<li>由于 Kubernetes 1.22 版本中去除了 CRD/WebhookConfiguration 等资源的 v1beta1 版本，目前 Kruise 无法部署到该版本的集群中。\n即将到来的 Kruise v1.0 会解决这个兼容性问题，并不再支持 Kubernetes 1.16 之前的版本。</li>\n</ol>\n<h2 id=\"%E9%80%9A%E8%BF%87-helm-charts-%E5%AE%89%E8%A3%85\">通过 helm charts 安装 <a class=\"header-anchor\" href=\"#%E9%80%9A%E8%BF%87-helm-charts-%E5%AE%89%E8%A3%85\">#</a></h2>\n<p>建议采用 helm v3.1+ 来安装 Kruise，helm 是一个简单的命令行工具可以从 <a href=\"https://github.com/helm/helm/releases\">这里</a> 获取。</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Kubernetes 1.13 或 1.14 版本</span>\nhelm install kruise https://github.com/openkruise/kruise/releases/download/v0.10.0/kruise-chart.tgz --<span class=\"hljs-built_in\">disable</span>-openapi-validation\n\n<span class=\"hljs-comment\"># Kubernetes 1.15 和更新的版本</span>\nhelm install kruise https://github.com/openkruise/kruise/releases/download/v0.10.0/kruise-chart.tgz\n</code></pre>\n<h2 id=\"%E9%80%9A%E8%BF%87-helm-charts-%E5%8D%87%E7%BA%A7\">通过 helm charts 升级 <a class=\"header-anchor\" href=\"#%E9%80%9A%E8%BF%87-helm-charts-%E5%8D%87%E7%BA%A7\">#</a></h2>\n<p>如果你在使用旧版本的 Kruise，建议为了安全性和更丰富的功能，升级到最新版本：</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Kubernetes 1.13 and 1.14</span>\nhelm upgrade kruise https://github.com/openkruise/kruise/releases/download/v0.10.0/kruise-chart.tgz --<span class=\"hljs-built_in\">disable</span>-openapi-validation\n\n<span class=\"hljs-comment\"># Kubernetes 1.15 and newer versions</span>\nhelm upgrade kruise https://github.com/openkruise/kruise/releases/download/v0.10.0/kruise-chart.tgz\n</code></pre>\n<p>注意：</p>\n<ol>\n<li>在升级之前，<strong>必须</strong> 先阅读 <a href=\"https://github.com/openkruise/kruise/blob/master/CHANGELOG.md\">Change Log</a> ，确保你已经了解新版本的不兼容变化。</li>\n<li>如果你要重置之前旧版本上用的参数或者配置一些新参数，建议在 <code>helm upgrade</code> 命令里加上 <code>--reset-values</code>。</li>\n</ol>\n<h2 id=\"%E5%8F%AF%E9%80%89%E9%A1%B9\">可选项 <a class=\"header-anchor\" href=\"#%E5%8F%AF%E9%80%89%E9%A1%B9\">#</a></h2>\n<p>注意直接安装 chart 会使用默认的 template values，你也可以根据你的集群情况指定一些特殊配置，比如修改 resources 限制或者配置 feature-gates。</p>\n<h3 id=\"%E5%8F%AF%E9%80%89%3A-chart-%E5%AE%89%E8%A3%85%E5%8F%82%E6%95%B0\">可选: chart 安装参数 <a class=\"header-anchor\" href=\"#%E5%8F%AF%E9%80%89%3A-chart-%E5%AE%89%E8%A3%85%E5%8F%82%E6%95%B0\">#</a></h3>\n<p>下表展示了 chart 所有可配置的参数和它们的默认值：</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>featureGates</code></td>\n<td>可配置的 feature gates 参数，空表示按默认开关处理</td>\n<td>``</td>\n</tr>\n<tr>\n<td><code>installation.namespace</code></td>\n<td>kruise 安装到的 namespace，一般不建议修改</td>\n<td><code>kruise-system</code></td>\n</tr>\n<tr>\n<td><code>manager.log.level</code></td>\n<td>kruise-manager 日志输出级别</td>\n<td><code>4</code></td>\n</tr>\n<tr>\n<td><code>manager.replicas</code></td>\n<td>kruise-manager 的期望副本数</td>\n<td><code>2</code></td>\n</tr>\n<tr>\n<td><code>manager.image.repository</code></td>\n<td>kruise-manager/kruise-daemon 镜像仓库</td>\n<td><code>openkruise/kruise-manager</code></td>\n</tr>\n<tr>\n<td><code>manager.image.tag</code></td>\n<td>kruise-manager/kruise-daemon 镜像版本</td>\n<td><code>v0.10.0</code></td>\n</tr>\n<tr>\n<td><code>manager.resources.limits.cpu</code></td>\n<td>kruise-manager 的 limit CPU 资源</td>\n<td><code>100m</code></td>\n</tr>\n<tr>\n<td><code>manager.resources.limits.memory</code></td>\n<td>kruise-manager 的 limit memory 资源</td>\n<td><code>256Mi</code></td>\n</tr>\n<tr>\n<td><code>manager.resources.requests.cpu</code></td>\n<td>kruise-manager 的 request CPU 资源</td>\n<td><code>100m</code></td>\n</tr>\n<tr>\n<td><code>manager.resources.requests.memory</code></td>\n<td>kruise-manager 的 request memory 资源</td>\n<td><code>256Mi</code></td>\n</tr>\n<tr>\n<td><code>manager.metrics.port</code></td>\n<td>metrics 服务的监听端口</td>\n<td><code>8080</code></td>\n</tr>\n<tr>\n<td><code>manager.webhook.port</code></td>\n<td>webhook 服务的监听端口</td>\n<td><code>9443</code></td>\n</tr>\n<tr>\n<td><code>manager.nodeAffinity</code></td>\n<td>kruise-manager 部署的 node affinity 亲和性</td>\n<td><code>{}</code></td>\n</tr>\n<tr>\n<td><code>manager.nodeSelector</code></td>\n<td>kruise-manager 部署的 node selector 亲和性</td>\n<td><code>{}</code></td>\n</tr>\n<tr>\n<td><code>manager.tolerations</code></td>\n<td>kruise-manager 部署的 tolerations</td>\n<td><code>[]</code></td>\n</tr>\n<tr>\n<td><code>daemon.log.level</code></td>\n<td>kruise-daemon 日志输出级别</td>\n<td><code>4</code></td>\n</tr>\n<tr>\n<td><code>daemon.port</code></td>\n<td>kruise-daemon 的 metrics/healthz 服务监听端口</td>\n<td><code>10221</code></td>\n</tr>\n<tr>\n<td><code>daemon.resources.limits.cpu</code></td>\n<td>kruise-daemon 的 limit CPU 资源</td>\n<td><code>50m</code></td>\n</tr>\n<tr>\n<td><code>daemon.resources.limits.memory</code></td>\n<td>kruise-daemon 的 limit memory 资源</td>\n<td><code>128Mi</code></td>\n</tr>\n<tr>\n<td><code>daemon.resources.requests.cpu</code></td>\n<td>kruise-daemon 的 request CPU 资源</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>daemon.resources.requests.memory</code></td>\n<td>kruise-daemon 的 request memory 资源</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>daemon.affinity</code></td>\n<td>kruise-daemon 部署的 affinity 亲和性 (可以排除一些 node 不部署 daemon)</td>\n<td><code>{}</code></td>\n</tr>\n<tr>\n<td><code>daemon.socketLocation</code></td>\n<td>Node 节点上 CRI socket 文件所在目录</td>\n<td><code>/var/run</code></td>\n</tr>\n<tr>\n<td><code>webhookConfiguration.failurePolicy.pods</code></td>\n<td>Pod webhook 的失败策略</td>\n<td><code>Ignore</code></td>\n</tr>\n<tr>\n<td><code>webhookConfiguration.timeoutSeconds</code></td>\n<td>所有 Kruise webhook 的调用超时时间</td>\n<td><code>30</code></td>\n</tr>\n<tr>\n<td><code>crds.managed</code></td>\n<td>是否安装 Kruise CRD (如何关闭则 chart 不会安装任何 CRD)</td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p>这些参数可以通过 <code>--set key=value[,key=value]</code> 参数在 <code>helm install</code> 或 <code>helm upgrade</code> 命令中生效。</p>\n<h3 id=\"%E5%8F%AF%E9%80%89%3A-feature-gate\">可选: feature-gate <a class=\"header-anchor\" href=\"#%E5%8F%AF%E9%80%89%3A-feature-gate\">#</a></h3>\n<p>Feature-gate 控制了 Kruise 中一些有影响性的功能：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Default</th>\n<th>Side effect (if closed)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PodWebhook</code></td>\n<td>启用对于 Pod <strong>创建</strong> 的 webhook (不建议关闭)</td>\n<td><code>true</code></td>\n<td>SidecarSet/KruisePodReadinessGate 不可用</td>\n</tr>\n<tr>\n<td><code>KruiseDaemon</code></td>\n<td>启用 <code>kruise-daemon</code> DaemonSet (不建议关闭)</td>\n<td><code>true</code></td>\n<td>镜像预热/容器重启 不可用</td>\n</tr>\n<tr>\n<td><code>DaemonWatchingPod</code></td>\n<td>每个 <code>kruise-daemon</code> 会 watch 与自己同节点的 pod （不建议关闭）</td>\n<td><code>true</code></td>\n<td>同 imageID 的原地升级，以及支持 env from labels/annotation 原地升级 不可用</td>\n</tr>\n<tr>\n<td><code>CloneSetShortHash</code></td>\n<td>启用 CloneSet controller 只在 pod label 中设置短 hash 值</td>\n<td><code>false</code></td>\n<td>CloneSet 名字不能超过 54 个字符（默认行为）</td>\n</tr>\n<tr>\n<td><code>KruisePodReadinessGate</code></td>\n<td>启用 Kruise webhook 将 'KruisePodReady' readiness-gate 在所有 Pod 创建时注入</td>\n<td><code>false</code></td>\n<td>只会注入到 Kruise workloads 创建的 Pod 中</td>\n</tr>\n<tr>\n<td><code>PreDownloadImageForInPlaceUpdate</code></td>\n<td>启用 CloneSet 自动为原地升级的过程创建 ImagePullJob 来预热镜像</td>\n<td><code>false</code></td>\n<td>原地升级无镜像提前预热</td>\n</tr>\n<tr>\n<td><code>CloneSetPartitionRollback</code></td>\n<td>启用如果 partition 被调大， CloneSet controller 会回滚 Pod 到 currentRevision 老版本</td>\n<td><code>false</code></td>\n<td>CloneSet 只会正向发布 Pod 到 updateRevision</td>\n</tr>\n<tr>\n<td><code>ResourcesDeletionProtection</code></td>\n<td>资源删除防护</td>\n<td><code>false</code></td>\n<td>资源删除无保护</td>\n</tr>\n<tr>\n<td><code>TemplateNoDefaults</code></td>\n<td>是否取消对 workload 中 pod/pvc template 的默认值注入</td>\n<td><code>false</code></td>\n<td>Should not close this feature if it has open</td>\n</tr>\n<tr>\n<td><code>PodUnavailableBudgetDeleteGate</code></td>\n<td>启用 PodUnavailableBudget 保护 pod 删除、驱逐</td>\n<td><code>false</code></td>\n<td>不防护 pod 删除、驱逐</td>\n</tr>\n<tr>\n<td><code>PodUnavailableBudgetUpdateGate</code></td>\n<td>启用 PodUnavailableBudget 保护 pod 原地升级</td>\n<td><code>false</code></td>\n<td>不防护 pod 原地升级</td>\n</tr>\n<tr>\n<td><code>WorkloadSpread</code></td>\n<td>启用 WorkloadSpread 管理应用多分区弹性与拓扑部署</td>\n<td><code>false</code></td>\n<td>不支持 WorkloadSpread</td>\n</tr>\n</tbody>\n</table>\n<p>如果你要配置 feature-gate，只要在安装或升级时配置参数即可，比如：</p>\n<pre><code class=\"language-bash\">$ helm install kruise https://... --<span class=\"hljs-built_in\">set</span> featureGates=<span class=\"hljs-string\">\"ResourcesDeletionProtection=true\\,PreDownloadImageForInPlaceUpdate=true\"</span>\n</code></pre>\n<p>如果你希望打开所有 feature-gate 功能，配置参数 <code>featureGates=AllAlpha=true</code>。</p>\n<h3 id=\"%E5%8F%AF%E9%80%89%3A-%E4%B8%AD%E5%9B%BD%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F\">可选: 中国本地镜像 <a class=\"header-anchor\" href=\"#%E5%8F%AF%E9%80%89%3A-%E4%B8%AD%E5%9B%BD%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F\">#</a></h3>\n<p>如果你在中国、并且很难从官方 DockerHub 上拉镜像，那么你可以使用托管在阿里云上的镜像仓库：</p>\n<pre><code class=\"language-bash\">$ helm install kruise https://... --<span class=\"hljs-built_in\">set</span>  manager.image.repository=openkruise-registry.cn-hangzhou.cr.aliyuncs.com/openkruise/kruise-manager\n</code></pre>\n<h2 id=\"%E5%8D%B8%E8%BD%BD\">卸载 <a class=\"header-anchor\" href=\"#%E5%8D%B8%E8%BD%BD\">#</a></h2>\n<p>注意：卸载会导致所有 Kruise 下的资源都会删除掉，包括 webhook configurations, services, namespace, CRDs, CR instances 以及所有 Kruise workload 下的 Pod。 请务必谨慎操作！</p>\n<p>卸载使用 helm chart 安装的 Kruise：</p>\n<pre><code class=\"language-bash\">$ helm uninstall kruise\nrelease <span class=\"hljs-string\">\"kruise\"</span> uninstalled\n</code></pre>\n",
  "link": "/zh-cn/docs/installation.html",
  "meta": {
    "title": "安装"
  }
}