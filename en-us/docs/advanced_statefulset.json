{
  "filename": "advanced_statefulset.md",
  "__html": "<h1>Advanced StatefulSet</h1>\n<p>This controller enhances the rolling update workflow of default <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\">StatefulSet</a>\ncontroller from two aspects: adding <a href=\"#maxunavailable-rolling-update-strategy\">MaxUnavailable rolling update strategy</a>\nand introducing <a href=\"#in-place-pod-update-strategy\">In-place Pod Update Strategy</a>.\nNote that Advanced StatefulSet extends the same CRD schema of default StatefulSet with newly added fields.\nThe CRD kind name is still <code>StatefulSet</code>.\nThis is done on purpose so that user can easily migrate workload to the Advanced StatefulSet from the\ndefault StatefulSet. For example, one may simply replace the value of <code>apiVersion</code> in the StatefulSet yaml\nfile from <code>apps/v1</code> to <code>apps.kruise.io/v1alpha1</code> after installing Kruise manager.</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">-  apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-string\">+</span>  <span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1alpha1</span>\n<span class=\"hljs-attr\">   kind:</span> <span class=\"hljs-string\">StatefulSet</span>\n<span class=\"hljs-attr\">   metadata:</span>\n<span class=\"hljs-attr\">     name:</span> <span class=\"hljs-string\">sample</span>\n<span class=\"hljs-attr\">   spec:</span>\n<span class=\"hljs-attr\">     replicas:</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attr\">     selector:</span>\n<span class=\"hljs-attr\">       matchLabels:</span>\n<span class=\"hljs-attr\">         app:</span> <span class=\"hljs-string\">sample</span>\n<span class=\"hljs-attr\">     template:</span>\n<span class=\"hljs-attr\">       metadata:</span>\n<span class=\"hljs-attr\">         labels:</span>\n<span class=\"hljs-attr\">           app:</span> <span class=\"hljs-string\">sample</span>\n    <span class=\"hljs-string\">...</span> \n</code></pre>\n<h3><code>MaxUnavailable</code> Rolling Update Strategy</h3>\n<p>This controller adds a <code>maxUnavailable</code> capability in the <code>RollingUpdateStatefulSetStrategy</code> to allow parallel Pod\nupdates with the guarantee that the number of unavailable pods during the update cannot exceed this value.\nIt is only allowed to use when the podManagementPolicy is <code>Parallel</code>.</p>\n<p>This feature achieves similar update efficiency like Deployment for cases where the order of\nupdate is not critical to the workload. Without this feature, the native <code>StatefulSet</code> controller can only\nupdate Pods one by one even if the podManagementPolicy is <code>Parallel</code>. The API change is described below:</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> RollingUpdateStatefulSetStrategy <span class=\"hljs-keyword\">struct</span> {\n\t<span class=\"hljs-comment\">// Partition indicates the ordinal at which the StatefulSet should be</span>\n\t<span class=\"hljs-comment\">// partitioned.</span>\n\t<span class=\"hljs-comment\">// Default value is 0.</span>\n\t<span class=\"hljs-comment\">// +optional</span>\n\tPartition *<span class=\"hljs-keyword\">int32</span> <span class=\"hljs-string\">`json:\"partition,omitempty\"`</span>\n+\t<span class=\"hljs-comment\">// The maximum number of pods that can be unavailable during the update.</span>\n+\t<span class=\"hljs-comment\">// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).</span>\n+\t<span class=\"hljs-comment\">// Absolute number is calculated from percentage by rounding down.</span>\n+\t<span class=\"hljs-comment\">// Also, maxUnavailable can just be allowed to work with Parallel podManagementPolicy.</span>\n+\t<span class=\"hljs-comment\">// Defaults to 1.</span>\n+\t<span class=\"hljs-comment\">// +optional</span>\n+\tMaxUnavailable *intstr.IntOrString <span class=\"hljs-string\">`json:\"maxUnavailable,omitempty\"`</span>\n}\n</code></pre>\n<p>For example, assuming an Advanced StatefulSet has five replicas named P0 to P4, and the workload can\ntolerate losing three replicas temporally. If we want to update the StatefulSet Pod spec from v1 to\nv2, we can perform the following steps using the <code>MaxUnavailable</code> feature for fast update.</p>\n<ol>\n<li>Set <code>MaxUnavailable</code> to 3 to allow three unavailable Pods maximally.</li>\n<li>Optionally, Set <code>Partition</code> to 4 in case canary update is needed. Partition means all Pods with an ordinal that is\ngreater than or equal to the partition will be updated. In this case P4 will be updated even though <code>MaxUnavailable</code>\nis 3.</li>\n<li>After P4 finish update, change <code>Partition</code> to 0. The controller will update P1,P2 and P3 concurrently.\nNote that with default StatefulSet, the Pods will be updated sequentially in the order of P3, P2, P1.</li>\n<li>Once one of P1, P2 and P3 finishes update, P0 will be updated immediately.</li>\n</ol>\n<h3><code>In-Place</code> Pod Update Strategy</h3>\n<p>This controller adds a <code>podUpdatePolicy</code> field in <code>spec.updateStrategy.rollingUpdate</code>\nwhich controls recreate or in-place update for Pods.</p>\n<p>With this feature, a Pod will not be recreated if the container images are the only updated spec in\nthe Advanced StatefulSet Pod template.\nKubelet will handle the image-only update by downloading the new images and restart\nthe corresponding containers without destroying the Pod. This feature is particularly useful\nin common container image update cases since all Pod namespace configurations\n(e.g, Pod IP) are preserved after update. In addition, Pods reschedule and reshuffle are avoided\nduring the update.</p>\n<p>Note that currently, only container image update is supported for in-place update. Any other Pod\nspec update such as changing the command or container ENV will be rejected by kube-apiserver.</p>\n<p>The API change is described below:</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> PodUpdateStrategyType <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-keyword\">const</span> (\n\t<span class=\"hljs-comment\">// RecreatePodUpdateStrategyType indicates that we always delete Pod and create new Pod</span>\n\t<span class=\"hljs-comment\">// during Pod update, which is the default behavior</span>\n\tRecreatePodUpdateStrategyType PodUpdateStrategyType = <span class=\"hljs-string\">\"ReCreate\"</span>\n+\t<span class=\"hljs-comment\">// InPlaceIfPossiblePodUpdateStrategyType indicates that we try to in-place update Pod instead of</span>\n+\t<span class=\"hljs-comment\">// recreating Pod when possible. Currently, only image update of pod spec is allowed. Any other changes to the pod</span>\n+\t<span class=\"hljs-comment\">// spec will fall back to ReCreate PodUpdateStrategyType where pod will be recreated.</span>\n+\tInPlaceIfPossiblePodUpdateStrategyType = <span class=\"hljs-string\">\"InPlaceIfPossible\"</span>\n+\t<span class=\"hljs-comment\">// InPlaceOnlyPodUpdateStrategyType indicates that we will in-place update Pod instead of</span>\n+\t<span class=\"hljs-comment\">// recreating pod. Currently we only allow image update for pod spec. Any other changes to the pod spec will be</span>\n+\t<span class=\"hljs-comment\">// rejected by kube api-server</span>\n+\tInPlaceOnlyPodUpdateStrategyType = <span class=\"hljs-string\">\"InPlaceOnly\"</span>\n)\n</code></pre>\n<ul>\n<li>\n<p><code>ReCreate</code> is the default strategy of podUpdatePolicy. Controller will recreate Pods when updated.\nThis is the same behavior as default StatefulSet.</p>\n</li>\n<li>\n<p><code>InPlaceIfPossible</code> strategy implies that the controller will check if current update is eligible\nfor in-place update. If so, an in-place update is performed by updating Pod spec directly. Otherwise,\ncontroller falls back to the original Pod recreation mechanism. The <code>InPlaceIfPossible</code> strategy only\nworks when <code>Spec.UpdateStrategy.Type</code> is set to <code>RollingUpdate</code>.</p>\n</li>\n<li>\n<p><code>InPlaceOnly</code> strategy implies that the controller will only in-place update Pods. Note that <code>template.spec</code>\nis only allowed to update <code>containers[x].image</code>, the api-server will return an error if you try to update other fields in\n<code>template.spec</code>.</p>\n<p><strong>More importantly</strong>, a readiness-gate named <code>InPlaceUpdateReady</code> must be  added into <code>template.spec.readinessGates</code>\nwhen using <code>InPlaceIfPossible</code> or <code>InPlaceOnly</code>. The condition <code>InPlaceUpdateReady</code> in podStatus will be updated to False before in-place\nupdate and updated to True after the update is finished. This ensures that pod remain at NotReady state while the in-place\nupdate is happening.</p>\n</li>\n</ul>\n<p>An example for StatefulSet using in-place update:</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">StatefulSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n<span class=\"hljs-attr\">  name:</span> <span class=\"hljs-string\">sample</span>\n<span class=\"hljs-attr\">spec:</span>\n<span class=\"hljs-attr\">  replicas:</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attr\">  serviceName:</span> <span class=\"hljs-string\">fake-service</span>\n<span class=\"hljs-attr\">  selector:</span>\n<span class=\"hljs-attr\">    matchLabels:</span>\n<span class=\"hljs-attr\">      app:</span> <span class=\"hljs-string\">sample</span>\n<span class=\"hljs-attr\">  template:</span>\n<span class=\"hljs-attr\">    metadata:</span>\n<span class=\"hljs-attr\">      labels:</span>\n<span class=\"hljs-attr\">        app:</span> <span class=\"hljs-string\">sample</span>\n<span class=\"hljs-attr\">    spec:</span>\n<span class=\"hljs-attr\">      readinessGates:</span>\n         <span class=\"hljs-comment\"># A new condition that ensures the pod remains at NotReady state while the in-place update is happening</span>\n<span class=\"hljs-attr\">      - conditionType:</span> <span class=\"hljs-string\">InPlaceUpdateReady</span>\n<span class=\"hljs-attr\">      containers:</span>\n<span class=\"hljs-attr\">      - name:</span> <span class=\"hljs-string\">main</span>\n<span class=\"hljs-attr\">        image:</span> <span class=\"hljs-attr\">nginx:alpine</span>\n<span class=\"hljs-attr\">  podManagementPolicy:</span> <span class=\"hljs-string\">Parallel</span> <span class=\"hljs-comment\"># allow parallel updates, works together with maxUnavailable</span>\n<span class=\"hljs-attr\">  updateStrategy:</span>\n<span class=\"hljs-attr\">    type:</span> <span class=\"hljs-string\">RollingUpdate</span>\n<span class=\"hljs-attr\">    rollingUpdate:</span>\n      <span class=\"hljs-comment\"># Do in-place update if possible, currently only image update is supported for in-place update</span>\n<span class=\"hljs-attr\">      podUpdatePolicy:</span> <span class=\"hljs-string\">InPlaceIfPossible</span>\n      <span class=\"hljs-comment\"># Allow parallel updates with max number of unavailable instances equals to 2</span>\n<span class=\"hljs-attr\">      maxUnavailable:</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n",
  "link": "/en-us/docs/advanced_statefulset.html",
  "meta": {}
}