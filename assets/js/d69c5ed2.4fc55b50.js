"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[7745],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3676:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return d},toc:function(){return c},default:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={slug:"workload-classification-guidance",title:"Kruise Workload Classification Guidance",authors:["Fei-Guo","FillZpp"],tags:["workload"]},s=void 0,p={permalink:"/blog/workload-classification-guidance",editUrl:"https://github.com/openkruise/openkruise.io/tree/master/blog/blog/2019-10-10-workload-classification-guidance.md",source:"@site/blog/2019-10-10-workload-classification-guidance.md",title:"Kruise Workload Classification Guidance",description:"Kubernetes does not provide a clear guidance about which controller is the best fit for",date:"2019-10-10T00:00:00.000Z",formattedDate:"October 10, 2019",tags:[{label:"workload",permalink:"/blog/tags/workload"}],readingTime:5.11,truncated:!1,authors:[{name:"Fei Guo",title:"Maintainer of OpenKruise",url:"https://github.com/Fei-Guo",imageURL:"https://github.com/Fei-Guo.png",key:"Fei-Guo"},{name:"Siyu Wang",title:"Maintainer of OpenKruise",url:"https://github.com/FillZpp",imageURL:"https://github.com/FillZpp.png",key:"FillZpp"}],prevItem:{title:"Learning Concurrent Reconciling",permalink:"/blog/learning-concurrent-reconciling"}},d={authorsImageUrls:[void 0,void 0]},c=[{value:"Controller Name Convention",id:"controller-name-convention",children:[]},{value:"Fixed Pod Name",id:"fixed-pod-name",children:[]},{value:"Summary",id:"summary",children:[]}],u={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Kubernetes does not provide a clear guidance about which controller is the best fit for\na user application. Sometimes, this does not seem to be a big problem if users understand\nboth the application and workload well. For example, users usually know when to choose\n",(0,o.kt)("inlineCode",{parentName:"p"},"Job/CronJob")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"DaemonSet")," since the concepts of these workload are straightforward -\nthe former is designed for temporal batch style applications and the latter is suitable\nfor long running Pod which is distributed in every node. On the other hand, the usage\nboundary between ",(0,o.kt)("inlineCode",{parentName:"p"},"Deployment")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," is vague. An application managed by\na ",(0,o.kt)("inlineCode",{parentName:"p"},"Deployment")," conceptually can be managed by a ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," as well, the opposite may\nalso apply as long as the Pod ",(0,o.kt)("inlineCode",{parentName:"p"},"OrderedReady")," capability of ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," is not mandatory.\nFurthermore, as more and more customized controllers/operators become available in Kubernetes\ncommunity, finding suitable controller can be a nonnegligible user problem especially\nwhen some controllers have functional overlaps."),(0,o.kt)("p",null,"Kruise attempts to mitigate the problem from two aspects:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Carefully design the new controllers in the Kruise suite to avoid unnecessary functional\nduplications that may confuse users."),(0,o.kt)("li",{parentName:"ul"},"Establish a classification mechanism for existing workload controllers so that user\ncan more easily understand the use cases of them. We will elaborate this more in this\npost. The first and most intuitive criterion for classification is the controller name.")),(0,o.kt)("h3",{id:"controller-name-convention"},"Controller Name Convention"),(0,o.kt)("p",null,"An easily understandable controller name can certainly help adoption. After consulting\nwith many internal/external Kubernetes users, we decide to use the following naming\nconventions in Kruise. Note that these conventions are not contradicted with the controller\nnames used in upstream controllers."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Set")," -suffix names: This type of controller manages Pods directly. Examples\ninclude ",(0,o.kt)("inlineCode",{parentName:"p"},"CloneSet"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ReplicaSet")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"SidecarSet"),". It supports\nvarious depolyment/rollout strategies in Pod level.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Deployment")," -suffix names: This type of controller does not manage Pods\ndirectly. Instead, it manages one or many ",(0,o.kt)("strong",{parentName:"p"},"Set")," -suffix workload instances which are\ncreated on behalf of one application. The controller can provide capabilities\nto orchestrate the deployment/rollout of multiple instances. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"Deployment"),"\nmanages ",(0,o.kt)("inlineCode",{parentName:"p"},"ReplicaSet")," and provides rollout capability which is not available in ",(0,o.kt)("inlineCode",{parentName:"p"},"ReplicaSet"),".\n",(0,o.kt)("inlineCode",{parentName:"p"},"UnitedDeployment")," (planned in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/openkruise/kruise/projects"},"M3 release"),")\nmanages multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," created in respect of multiple domains\n(i.e., fault domains) within one cluster.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Job")," -suffix names: This type of controller manages batch style applications with\ndifferent depolyment/rollout strategies. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"BroadcastJob")," distributes a\njob style Pod to every node in the cluster."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Set"),", ",(0,o.kt)("strong",{parentName:"p"},"Deployment")," and ",(0,o.kt)("strong",{parentName:"p"},"Job")," are widely adopted terms in Kubernetes community.\nKruise leverages them with certain extensions."),(0,o.kt)("p",null,"Can we further distinguish controllers with the same name suffix? Normally the string prior to\nthe suffix should be self-explainable, but in many cases it is hard to find a right word to\ndescribe what the controller does. Check to see how ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," is originated in\nthis ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/kubernetes/issues/27430"},"thread"),". It takes four\nmonths for community to decide to use the name ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," to replace the original\nname ",(0,o.kt)("inlineCode",{parentName:"p"},"PetSet")," although the new name still confuse people by looking\nat its API documentation. This example showcases that sometimes a well-thought-out name\nmay not be helpful to identify controller. Again, Kruise does not plan to resolve\nthis problem. As an incremental effort, Kruise considers the following criterion to help classify\n",(0,o.kt)("strong",{parentName:"p"},"Set")," -suffix controllers."),(0,o.kt)("h3",{id:"fixed-pod-name"},"Fixed Pod Name"),(0,o.kt)("p",null,"One unique property of ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," is that it maintains consistent identities for\nPod network and storage. Essentially, this is done by fixing Pod names.\nPod name can identify both network and storage since it is part of DNS record and\ncan be used to name Pod volume claim. Why is this property needed given that all Pods in\n",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," are created from the same Pod template?\nA well known use case is to manage distributed coordination server application such as\netcd or Zookeeper. This type of application requires the cluster member\n(i.e., the Pod) to access the same data (in Pod volume) whenever a member is\nreconstructed upon failure, in order to function correctly. To differentiate the term\n",(0,o.kt)("inlineCode",{parentName:"p"},"State")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," from the same term used in other computer science areas,\nI'd like to associate ",(0,o.kt)("inlineCode",{parentName:"p"},"State")," with Pod name in this document. That being said, controllers\nlike ",(0,o.kt)("inlineCode",{parentName:"p"},"ReplicaSet")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"DaemonSet")," are ",(0,o.kt)("inlineCode",{parentName:"p"},"Stateless")," since they don't require to reuse the\nold Pod name when a Pod is recreated."),(0,o.kt)("p",null,"Supporting ",(0,o.kt)("inlineCode",{parentName:"p"},"Stateful")," does lead to inflexibility for controller. ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," relies on ordinal\nnumbers to realize fixing Pod names. The workload rollout and scaling\nhas to be done in a strict order. As a consequence, some useful enhancements to ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet"),"\nbecome impossible. For example,"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Selective Pod upgrade and Pod deletion (when scale in). These features can be helpful\nwhen Pods are spread across different regions or fault domains."),(0,o.kt)("li",{parentName:"ul"},"The ability of taking control over existing Pods with arbitrary names. There are\ncases where Pod creation is done by one controller but Pod lifecycle management\nis done by another controller (e.g., ",(0,o.kt)("inlineCode",{parentName:"li"},"StatefulSet"),").")),(0,o.kt)("p",null,"We found that many containerized applications do not require the ",(0,o.kt)("inlineCode",{parentName:"p"},"Stateful")," property\nof fixing Pod names, and ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," is hard to be extended for those\napplications in many cases. To fill the gap, Kruise has released a new controller\ncalled ",(0,o.kt)("inlineCode",{parentName:"p"},"CloneSet")," to manage the ",(0,o.kt)("inlineCode",{parentName:"p"},"Stateless")," applications. In a nutshell, ",(0,o.kt)("inlineCode",{parentName:"p"},"CloneSet"),"\nprovides PVC support and enriched rollout and management capabilities.\nThe following table roughly compares Advanced StatefulSet and CloneSet in a few aspects."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Features"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Advanced StatefulSet"),(0,o.kt)("th",{parentName:"tr",align:"center"},"CloneSet"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"PVC"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Pod name"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Ordered"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Random")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Inplace upgrade"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Max unavailable"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Selective deletion"),(0,o.kt)("td",{parentName:"tr",align:"center"},"No"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Selective upgrade"),(0,o.kt)("td",{parentName:"tr",align:"center"},"No"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Change Pod ownership"),(0,o.kt)("td",{parentName:"tr",align:"center"},"No"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes")))),(0,o.kt)("p",null,"Now, a clear recommendation to Kruise users is if your applications require fixed Pod names (identities for Pod network and storage), you can start with ",(0,o.kt)("inlineCode",{parentName:"p"},"Advanced StatefulSet"),".\nOtherwise, ",(0,o.kt)("inlineCode",{parentName:"p"},"CloneSet")," is the primary choice of ",(0,o.kt)("strong",{parentName:"p"},"Set")," -suffix controllers (if ",(0,o.kt)("inlineCode",{parentName:"p"},"DaemonSet")," is not\napplicable)."),(0,o.kt)("h3",{id:"summary"},"Summary"),(0,o.kt)("p",null,"Kruise aims to provide intuitive names for new controllers. As a supplement, this post\nprovides additional guidance for Kruise users to pick the right controller for their\napplications. Hope it helps!"))}m.isMDXComponent=!0}}]);